app:
  region: ap-southeast-1
  puma:
    healthcheck: true
    enabled: true
    hpa:
      minReplicas: 1
      maxReplicas: 2
      averageCPUUtilization: 75
      averageMemoryUtilization: 75
    mem_limit: 2048
    mem_required: 1024
    cpu_limit: 1000
    cpu_required: 500
  sidekiq:
    lifecycle:
      preStop:
       command:
         - /bin/sh
         - '-c'
         - |
           kill -TERM $(ps -aux| grep -i 'sidekiq' | awk 'NR==1{print $2}')  
    healthcheck: false
    enabled: false
    hpa:
      minReplicas: 1
      maxReplicas: 1
      averageCPUUtilization: 75
      averageMemoryUtilization: 75
    mem_limit: 400
    mem_required: 200
    cpu_limit: 200
    cpu_required: 100
  qlogger:
    healthcheck: false
    enabled: false
    hpa:
      minReplicas: 1
      maxReplicas: 1
      averageCPUUtilization: 75
      averageMemoryUtilization: 75
    mem_limit: 400
    mem_required: 200
    cpu_limit: 200
    cpu_required: 100
  racecar:
    enabled: true
    hpa:
      minReplicas: 1
      maxReplicas: 1
      averageCPUUtilization: 75
      averageMemoryUtilization: 75
    mem_limit: 0
    mem_required: 400
    cpu_limit: 0
    cpu_required: 100     
  namespace: demo
  name: qship
  port: 3000
  env: demo
  image_pull_policy: IfNotPresent
  node_selectors:
    environment: demo
    node-type: spot
  preDeployScript:
    enabled: true
    scriptPath: pre-deploy/pre-deploy.sh #script to be ran inside the container
cron:
  enabled: false
  command: "cd /var/app/current; bin/init-config.sh; bundle exec rake open_api_counters:reset --silent"
  schedule: "0 * * * *"
image:
  name: 244836737383.dkr.ecr.ap-southeast-1.amazonaws.com/qship-quincus-images
  tag: "e69cab0"
service:
  type: ClusterIP
secretManager:
  secretId: demo/qship
  versionId: e5f9400f-4fb7-4f59-bd47-80ebeaa4d169
ingress:
  enabled: true
  hostName: api.qship.demo.quincus.com
  path: /
  nginx_annotations:
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 100m
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://dispatch.preprod.quincus.com, https://shipment.preprod.quincus.com, https://pricing.preprod.quincus.com, https://common.preprod.quincus.com, https://order.preprod.quincus.com, https://preprod.quincus.com, https://quincus.preprod.qship.quincus.com, https://preprod.quincus.app, https://qsol2.preprod.qship.quincus.com, https://qsol.preprod.qship.quincus.com, https://140223.preprod.qship.quincus.com, https://520e2e.preprod.qship.quincus.com, https://seg1512.preprod.qship.quincus.com"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,locale,token,platform"  
redis:
  architecture: standalone
  enabled: false
  master:
    persistence:
      size: 8Gi
    node_selectors:
      environment: demo
  auth:
    enabled: false