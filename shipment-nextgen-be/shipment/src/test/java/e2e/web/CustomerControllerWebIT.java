package e2e.web;import com.quincus.shipment.api.FilterApi;import com.quincus.shipment.impl.web.CustomerControllerImpl;import com.quincus.shipment.impl.web.exception.ShipmentExceptionHandler;import com.quincus.web.common.exception.model.QuincusError;import com.quincus.web.common.model.Response;import com.quincus.web.common.web.BaseShipmentControllerWebIT;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;import org.springframework.boot.test.mock.mockito.MockBean;import org.springframework.http.HttpStatus;import org.springframework.security.test.context.support.WithMockUser;import org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.setup.MockMvcConfigurer;import java.util.List;import static com.quincus.shipment.api.constant.ShipmentErrorCode.VALIDATION_ERROR;@WebMvcTest(controllers = {CustomerControllerImpl.class})@ContextConfiguration(classes = {CustomerControllerImpl.class, ShipmentExceptionHandler.class})class CustomerControllerWebIT extends BaseShipmentControllerWebIT {    @MockBean    private FilterApi filterApi;    @Override    protected MockMvcConfigurer applySpringSecurity() {        return SecurityMockMvcConfigurers.springSecurity();    }    @Test    @WithMockUser    @DisplayName("Min Pagination and Per page filter is 1. Lower than that should have an error")    void shouldReturnValidationErrorForBelowPaginationRequirementForCustomerController() throws Exception {        //WHEN        MvcResult result = performGetRequest("/filter/customers?page=0&per_page=0");        //THEN        Response<QuincusError> response = extractErrorResponse(result);        ExpectedError expectedError = ExpectedError.builder()                .message("There is a validation error in your request")                .status(HttpStatus.BAD_REQUEST)                .errorCode(VALIDATION_ERROR.name())                .fieldErrorSize(2)                .build();        List<FieldError> expectedFieldErrors = buildErrorList(                new FieldError("find_customers.per_page", "must be greater than or equal to 1"),                new FieldError("find_customers.page", "must be greater than or equal to 1")        );        assertCommonErrorStructure(response, expectedError);        assertFieldErrors(response.getData().fieldErrors(), expectedFieldErrors);    }    @Test    @WithMockUser    @DisplayName("Max Per page filter is 100. Higher than that should have an error")    void shouldReturnValidationErrorForAbovePaginationRequirementForCustomerController() throws Exception {        //WHEN        MvcResult result = performGetRequest("/filter/customers?page=1&per_page=101");        //THEN        Response<QuincusError> response = extractErrorResponse(result);        ExpectedError expectedError = ExpectedError.builder()                .message("There is a validation error in your request")                .status(HttpStatus.BAD_REQUEST)                .errorCode(VALIDATION_ERROR.name())                .fieldErrorSize(1)                .build();        List<FieldError> expectedFieldErrors = buildErrorList(                new FieldError("find_customers.per_page", "must be less than or equal to 100")        );        assertCommonErrorStructure(response, expectedError);        assertFieldErrors(response.getData().fieldErrors(), expectedFieldErrors);    }    @Test    @WithMockUser    @DisplayName("Max key filter is 100. Higher than that should have an error")    void shouldReturnValidationErrorForCustomerSearchKeyGreaterThan100ForCustomerController() throws Exception {        //WHEN        MvcResult result = performGetRequest("/filter/customers?page=1&per_page=10&key=lookingForTheLongestCustomerNameRecordedInHumanHistoryThatIWouldProbablyNotFindCauseThisIsJustRandom!");        //THEN        Response<QuincusError> response = extractErrorResponse(result);        ExpectedError expectedError = ExpectedError.builder()                .message("There is a validation error in your request")                .status(HttpStatus.BAD_REQUEST)                .errorCode(VALIDATION_ERROR.name())                .fieldErrorSize(1)                .build();        List<FieldError> expectedFieldErrors = buildErrorList(                new FieldError("find_customers.key", "size must be between 0 and 100")        );        assertCommonErrorStructure(response, expectedError);        assertFieldErrors(response.getData().fieldErrors(), expectedFieldErrors);    }}